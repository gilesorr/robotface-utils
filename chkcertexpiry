#!/bin/bash
# <|째_째|>
# shellcheck disable=SC1117
#     The use of shell colours involves a lot of "\0" so I'm disabling that
#     linter error (SC1117) for this file.
#
# Purpose:
#     Check TLS certificates for a list of FQDNS.
#
# TODO:
# - check that returned cert FQDN matches given hostname (curl error 60
#   occurs on both certs issued by an unknown authority _and_ when the
#   returned cert doesn't match the original FQDN and we need to
#   distinguish) (done in 'tlsdetails')
# - add a command line switch to not display "good" (not expiring soon, no
#   errors) certificates
# - wrap/preface 'openssl s_client ...' with the GNU 'timeout' command?
#   I've had little problem with s_client hanging, but when it does, the
#   time-out period is very long
# - make functions more atomic, and move them to robotface_utils
#
# RECENTLY ADDDED:
# - 2023-04-23: better filtering of issuer name (problems with quotes and
#   commas thought to be fixed)
# - 2023-04-12: comments and empty lines filtered out of URL files
# - 2023-04-12: -n <count> to change cert warning days
#
# CAVEATS:
# - I was thinking of sorting and de-duping the URL lists, but some people
#   may not want that done.  Since the certs are tested in sequence from user
#   input, de-duping and sorting is up to the user.

######################################################################
#           User settings
######################################################################
# If certs expire in less than EXPIRY_ALARM_DAYS, highlight the cert date
# in the output (this can also be changed at the command line):
EXPIRY_ALARM_DAYS=45
# How long 'curl' waits before giving up on a non-responsive host:
CURL_TIMEOUT=4

# Set some colours for text output:
B_RED="\033[1;31m"
B_GREEN="\033[1;32m"
B_YELLOW="\033[1;33m"
NO_COLOUR="\033[0;0m"

# If you find the script too colourful, tweak it more to your liking:
EXPIRY_COLOUR="${B_YELLOW}"
HOST_COLOUR="${B_GREEN}"
WARNING_COLOUR="${B_RED}"


######################################################################
#           List hosts you want tested
######################################################################
list-fqdns () {
    echo "
        kids.tpl.ca
        gilesorr.com
        www.tpl.ca
        www.google.ca
        doesnotexist.aabb
    "
}


######################################################################
#                        Load <|째_째|> library
######################################################################
# Get our library of functions:
# shellcheck disable=1090 # Can't follow non-constant source
# shellcheck disable=1091 # Not following ...
source "$(dirname "${0}")/robotface_utils"


######################################################################
#                        Check for GNU 'date'
######################################################################
# There may be a better way to test.  Send a PR if you know it.

# if it barfs on a long option ("--help") assume it's not GNU:
if date --help > /dev/null 2>&1
then
    is_GNU_date="true"
else
    is_GNU_date="false"
fi


######################################################################
#                        Help / Usage
######################################################################

usage () {
    # Unlike Python's "argparse," Bash's "getopts" doesn't auto-generate
    # the help or keep this "usage" output up-to-date: you have to do that.
    exp="$(echo -e "${EXPIRY_COLOUR}")"
    no="$(echo -e "${NO_COLOUR}")"
    cat << EOF
Usage:
    $(basename "${0}") [-h] [-v] [-s] [-i] [-t <filename>]

Check TLS certificate expiry dates and issuers across hosts.

-h            show this help and exit
-i            check internal list of FQDNs (list is embedded in the script)
-n <count>    if cert expires in less than <count> days, ${exp}text is colourized${no}
              (default ${EXPIRY_ALARM_DAYS} days)
-s            use System versions of 'curl' and 'openssl' (don't search)
-t <file>     check all FQDNs in the file (can be used more than once)
-v            version

    Example:
        $(basename "${0}") -s -t <(list-ansible-hosts) -t fqdns.txt
    where 'list-ansible-hosts' is a command that does what the name implies
    (this uses a Bash trick to turn command output into a HERE document).
EOF
}


######################################################################
#           Print the date of expiry of a site certificate
######################################################################

dateandissuer () {
    # "man s_client" or "man x509" to get the documentation for these
    # openssl subcommands.  '-servername' was added to prevent redirects
    # from one name to another getting the cert of the redirect domain.
    sclient_out="$(echo | ${OPENSSL} s_client -connect "${1}:443" -servername "${1}" 2>/dev/null)"
    issuer="$(certissuer "${sclient_out}")"

    ugly_date="$(echo "${sclient_out}" | ${OPENSSL} x509 -noout -dates | grep notAfter | awk 'BEGIN { FS="=" } { print $2 }')"
    # 'man strftime' to find more about date formatting
    # and http://stackoverflow.com/questions/1842634/parse-date-in-bash
    # 'date' behaves very differently between Mac and GNU 'date', handle
    # separately.
    if [[ ${ugly_date} == *"GMT"* ]]
    then
        if ${is_GNU_date}
        then
            expiry_epoch_seconds=$(date '+%s' -d "${ugly_date}")
        else # assuming Mac
            expiry_epoch_seconds=$(date -jf '%b %e %H:%M:%S %Y %Z' "${ugly_date}" "+%s")
        fi
        # and we convert to seconds from the Unix Epoch ...
        now_epoch_seconds=$(date "+%s")
        ugly_date_sans_time="$(echo "${ugly_date}" | sed -e 's/ [012][0-9]:[0-5][0-9]:[0-5][0-9] /, /' -e 's/ GMT//' )"
        if [ $(( expiry_epoch_seconds - now_epoch_seconds )) -gt $(( EXPIRY_ALARM_DAYS * 60 * 60 * 24 )) ]
        then
            echo -n "${ugly_date_sans_time} "
        else
            echo -en "${EXPIRY_COLOUR}${ugly_date_sans_time}${NO_COLOUR} "
        fi
        echo "(${issuer})"
    else
        echo -e "${WARNING_COLOUR}Date retrieved but not readable${NO_COLOUR} "
    fi
}


######################################################################
#                    search certificates
######################################################################

checkcert() {
    host="${1}"
    # for each host, print the name colourized and then print the
    # certificate date.  Date will be coloured EXPIRY_COLOUR if the
    # expiry date is closer than EXPIRY_ALARM_DAYS away.
    echo -en "${HOST_COLOUR}${host}${NO_COLOUR}: "
    # we only want curl's return value, send the rest to the trash
    "${CURL}" -m $CURL_TIMEOUT "https://${host}" > /dev/null 2>&1
    curlretval=$?
    # 'man curl' is your friend for return values - at the end of the
    # document.
    case ${curlretval} in
        0)  # the value you're always hoping for ...
            dateandissuer "${host}"
            ;;
        6) # couldn't resolve host
            echo -e "${WARNING_COLOUR}Host couldn't be resolved.${NO_COLOUR}"
            ;;
        7) # man curl: "Failed to connect to host."
            echo -e "${WARNING_COLOUR}Unable to connect to host or host doesn't have certificate.${NO_COLOUR}"
            ;;
        28) # Operation time-out
            echo -e "${WARNING_COLOUR}Not a valid SSL/TLS host (time-out)?${NO_COLOUR}"
            ;;
        35) # SSL connect error. The SSL handshaking failed.
            echo -e "${WARNING_COLOUR}SSL handshake failure.${NO_COLOUR}"
            ;;
        51) # man curl: "The peer's SSL certificate or SSH MD5
            # fingerprint was not OK." this seems to occur for a
            # machine that has a public-facing name that's different
            # than the one we're trying to call.
            echo -e "${WARNING_COLOUR}curl dislikes certificate: this name doesn't match public name?${NO_COLOUR}"
            ;;
        60) #
            # 60: Peer certificate cannot be authenticated with known
            #     CA certificates (we sometimes get this for sites with
            #     our certs)
            echo -e "$(dateandissuer "${host}") ${WARNING_COLOUR}dubious CA (curl error 60)${NO_COLOUR}"
            ;;
        127) # 'man curl' doesn't list this, but by all appearances ...
             # (may happen under other circumstances too):
            echo -e "${WARNING_COLOUR}malformed 'curl' command ... probably a script problem?${NO_COLOUR}"
            ;;
        *)
            echo -e "${WARNING_COLOUR}don't recognize the curl return value, update the script for '${curlretval}'${NO_COLOUR}"
            ;;
    esac
}


######################################################################
#                    Process the command line
######################################################################

if [ $# -lt 1 ]
then
    usage
    exit 1
fi

URLFILES=()
INTERNAL="false"
EXTERNAL="false"

# http://wiki.bash-hackers.org/howto/getopts_tutorial
while getopts ":hvist:n:" opt
do
    case ${opt} in
        h)
            usage
            exit 0
            ;;
        i)  # go through the internal list of certificates
            INTERNAL="true"
            ;;
        n)
            incomingcount="${OPTARG}"
            if [[ $incomingcount =~ ^[0-9]+$ ]]
            then
                EXPIRY_ALARM_DAYS="${incomingcount}"
            else
                echo "'-n' requires a positive integer."
                usage
                exit 2
            fi
            ;;
        s)  # use System utilities
            CURL="/usr/bin/curl"
            OPENSSL="/usr/bin/openssl"
            #SYSTEMUTILS="true"
            ;;
        t)
            EXTERNAL="true"
            URLFILES+=("${OPTARG}")
            ;;
        v)
            rfversion
            exit 0
            ;;

        \?)
            echo "invalid option: -${OPTARG}" >&2
            usage
            exit 1
            ;;
        :)
            # when an option requires an argument and none is given,
            # it lands here:
            echo "option -${OPTARG} requires an argument." >&2
            usage
            exit 1
            ;;
    esac
done
shift $(( OPTIND - 1 ))


######################################################################
#                    Set the curl and openssl versions
######################################################################

if [ -z "${OPENSSL}" ]
then
    OPENSSL="$(findtls13openssl)"
    if [ -z "${OPENSSL}" ]
    then
        echo "This script requires a version of OpenSSL that supports TLS 1.3, which wasn't found.  Exiting."
        exit 1
    else
        echo "Using OpenSSL:  ${OPENSSL}"
    fi
fi

if [ -z "${CURL}" ]
then
    CURL="$(findtls13curl)"
    if [ -z "${CURL}" ]
    then
        echo "This script requires a version of 'curl' that supports TLS 1.3, which wasn't found.  Exiting."
        exit 1
    else
        echo "Using curl:  ${CURL}"
    fi
fi


######################################################################
#                    Run the main function
######################################################################

if ${INTERNAL}
then
    for host in $( list-fqdns )
    do
        checkcert "${host}"
    done
fi

# Print a visible divider between internal and external lists if both are
# executed.
if ${INTERNAL} && ${EXTERNAL}
then
    echo "     -----"
fi

if ${EXTERNAL}
then
    for urlfile in "${URLFILES[@]}"
    do
        while read -r url
        do
            # Tried to filter out comment lines here, no joy
            # as is, it filters out empty lines ...
            # || ! [[ "${url}" =~ '#' ]]
            if [ -n "${url}" ]
            then
                checkcert "${url}"
            fi
        # feed in the URL file(s), filtering out empty lines and comments:
        done < <(grep -ve '^ *#' "${urlfile}" | grep -ve '^ *$')
    done
fi

if ${INTERNAL} || ${EXTERNAL}
then
    echo -e "Expiries less than ${EXPIRY_ALARM_DAYS} days away have been ${EXPIRY_COLOUR}highlighted${NO_COLOUR} "
fi

