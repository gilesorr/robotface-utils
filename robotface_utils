#!/usr/bin/env bash
# <|째_째|>
#
# This is a library of functions used by other <|째_째|> Bash scripts.
#
# certdaystoexpiry() - given s_client output, return day count until
#   certificate expires
# certexpirydate() - given s_client output, return certificate expiry date
# certissuer() - given s_client output, returns the issuer name
# dnsmatch() - given an FQDN and the list of DNS names from a certificate,
#   see if there's a match.  Returns 0/1
# findtls13curl() - returns path to curl with TLS 1.3 or empty
# findtls13openssl() - returns path to OpenSSL with TLS 1.3 or empty
# ishostnamevalid() - check if the hostname is in the DNS
# rfversion() - returns repo info, tag or short hash, checkout date
#
# TODO:


######################################################################
#                    certdaystoexpiry
######################################################################
# Given the output of 'openssl s_client <url>', this will return the name.
# This does date math, but it's specific to the date format of certificates
# (perhaps not on Linux, but definitely if on Mac).

certdaystoexpiry() {
    expiry_date="$(certexpirydate "${1}")"
    if date --version 2>/dev/null | grep -q GNU
    then
        # Linux (or at least GNU)
        expiry_epoch_seconds=$(date --date="${expiry_date}" "+%s")
    else
        # Assuming the Mac version:
        expiry_epoch_seconds=$(date -jf '%b %e %H:%M:%S %Y %Z' "${expiry_date}" "+%s")
    fi
    # and we convert to seconds from the Unix Epoch ...
    now_epoch_seconds=$(date "+%s")
    seconds_to_expiry=$(( expiry_epoch_seconds - now_epoch_seconds ))
    echo "$(( seconds_to_expiry / 60 / 60 / 24 ))"
}


######################################################################
#                    certexpirydate
######################################################################
# Given the output of 'openssl s_client <url>', this will return the expiry
# date of the certificate.

certexpirydate() {
    echo "${1}" | ${OPENSSL} x509 -noout -dates | awk 'BEGIN { FS="=" } /notAfter/ { print $2 }'
}


######################################################################
#                    certissuer
######################################################################
# Given the output of 'openssl s_client <url>', this will return the name
# of the certificate issuer.

certissuer () {
    # This accepts a single string which is the contents of
    #       openssl s_client -connect \$url:443 -servername $url 2>/dev/null
    #
    # From here things get a bit ugly, as OpenSSL and LibreSSL spit out
    # significantly differently formatted issuer lines.  We massage the
    # output we receive so that both types end up similar enough to each
    # other that we can extract the results we want ... all the time only
    # using the simplest 'sed' commands because Macs have BSD sed and
    # Linux has GNU sed, which also behave very differently when you
    # start getting into the weeds ...

    issuerline="$(echo "${1}" | ${OPENSSL} x509 -noout -issuer)"
    # remove "issuer=" from the start of the line,
    # then remove the spaces around the equals signs (if they exist):
    compressedline="$(echo "${issuerline#issuer=}" | sed -e 's/ =/=/g' -e 's/= /=/g')"
    # if LibreSSL, there's still a leading slash - let's lose that:
    tmp="${compressedline%/}"
    # now split on [/,][A-Z]+= retaining the ([A-Z]+=) onto separate lines:
    splits="$(echo "${tmp}" | sed -e 's_[/,] *\([A-Z][A-Z]*=\)_\n\1_g')"
    # finally capture the only thing we want, the text that starts with
    # "O=...":
    theO="$(echo "${splits}" | grep "^O=" | sed -e 's/^O=//')"
    # send back our hard-earned result:
    echo "${theO}"
}

######################################################################
#                    dnsmatch
######################################################################
# Given an FQDN and the "DNS:" entries from a certificate (which is itself
# just a comma-separated list of domains - although it may contain
# wildcards), see if the certificate is for the FQDN.
#
# NOTE: dnsEntries should be passed in as a separate string, not as
# multiple strings.

dnsmatch () {
    FQDN="${1}"
    dnsEntries="${2}"
    if [[ ${dnsEntries} =~ ${FQDN} ]]
    then
        # FQDN is in the list of entries (and not a wildcard):
        return 0
    else
        # Better look for a wildcard ...
        if [[ ${dnsEntries} =~ \* ]]
        then
            # we have a wildcard, go through them:
            # Process: split the list on ', ' between names, then match
            # only the items with * in them (wildcards), then remove the
            # leading '*.' and finally try to match.
            for dom in $(echo "${dnsEntries}" | sed -e 's/, /\n/g' | grep '\*' | sed -e 's/\*\.//')
            do
                if [[ ${FQDN} =~ ${dom} ]]
                then
                    # wildcard match:
                    return 0
                fi
            done
        fi
        # not a wildcard and not a match:
        return 1
    fi
}


######################################################################
#                    findtls13curl
######################################################################
# Finds 'curl' that supports TLS 1.3 or returns an empty string
# Thanks: https://unix.stackexchange.com/questions/672792/determine-tls-versions-supported-by-curl

findtls13curl () {
    # In 2021 Apple's 'curl' didn't support TLS 1.3.  By macOS Monterey this
    # was fixed, but it's still worth checking for.  Look for
    # brew-installed versions too:
    CURL=""
    for curlbinary in /opt/homebrew/opt/curl/bin/curl /usr/local/opt/curl/bin/curl /usr/bin/curl curl
    do
        if [ -x "${curlbinary}" ]
        then
            # This usually throws an error because localhost:1 can't be connected
            # to, but we don't care unless we get error 2 which indicates that we
            # have a bad option in play.
            ${curlbinary} --tlsv1.3 --silent --connect-timeout 1 --url 'http://localhost:1' 2>/dev/null
            if [[ $? -ne 2 ]]
            then
                CURL="${curlbinary}"
                break
            fi
        fi
    done
    echo "${CURL}"
}

######################################################################
#                    findtls13openssl
######################################################################
# Finds an OpenSSL that supports TLS 1.3 or returns an empty string

findtls13openssl () {
    # Apple's own 'openssl' was incredibly old (0.9.8) until ~2019-06 when they
    # changed to LibreSSL which is better, but also didn't initially
    # support TLS 1.3.  Brew respects Apple's version, so we have to go on
    # a version hunt.
    #
    # For Linux, the second-last entry will usually work.

    OPENSSL=""

    # Put Mac-preferred OpenSSL variants (Intel and M1 silicon paths) first
    # so they're found before LibreSSL:
    for opensslbinary in /usr/local/opt/openssl@1.1/bin/openssl /opt/homebrew/opt/openssl@1.1/bin/openssl /usr/local/opt/openssl/bin/openssl /usr/bin/openssl openssl
    do
        if [ -x "${opensslbinary}" ]
        then
            if ( ${opensslbinary} s_client -help 2>&1 >/dev/null | grep -q -- "-tls1_3" )
            then
                OPENSSL="${opensslbinary}"
                break
            fi
        fi
    done
    echo "${OPENSSL}"
}

######################################################################
#                    is hostname valid
######################################################################

ishostnamevalid () {
    # given a hostname, try to find the IP and use that to determine if the
    # hostname is actually valid.  Return 0 for a valid hostname, 1 for an
    # invalid hostname.

    IP="$( dig +short "${1}")"
    if [ -z "${IP}" ]
    then
        # hostname isn't valid - no IP returned
        return 1
    else
        # IP returned, valid hostname
        return 0
    fi
}

######################################################################
#                    robotface version
######################################################################
# Not well researched or well written, but does work for a basic checkout.
# Returns:
#     - branch/tag/date if there's a tag
#     - branch/hash/date if no tag
#
# - uses 'realpath' to find the code
# - 'git rev-parse --short HEAD' to get the short hash (what if
#   you're not at HEAD?)
# - 'git tag --contains <hash> | cat' to check if current hash is tagged
# - 'git rev-parse --abbrev-ref HEAD' to get just the branch
# - 'git log -1 --format=%cd' to show the last commit datestamp

rfversion () {
    # shellcheck disable=SC2164  # Use "'cd ... || exit' or 'cd ... || return' in case cd fails."
    cd "$(dirname "$(realpath "$(which "${0}")")")"
    remote="$(git remote -v | grep origin | grep fetch | awk '{ print $2 }')"
    branch="$(git rev-parse --abbrev-ref HEAD)"
    shorthash="$(git rev-parse --short HEAD)"
    tag="$(git tag --contains "${shorthash}")"
    revdate="$(git log -1 --format=%cd)"

    # Output:
    echo "$(basename "${0}") version:"
    echo "${remote} branch: ${branch}"
    if [ -n "${tag}" ]
    then
        echo -n "${tag} / "
    else
        echo -n "${shorthash} / "
    fi
    echo "${revdate}"
}

