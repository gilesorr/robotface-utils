#!/usr/bin/env bash
#
#   Filename:      tlsversions
#   Created:       2023-04-28
#   Purpose:       Compare "tlsversions" output from openssl and libressl
#
# 2023-04-28: Initial problem solved ... With LibreSSL this barfs:
#       'echo | openssl s_client -connect newegg.ca:443 -tls1_2'
# but with OpenSSL it works.  But:
#       'echo | openssl s_client -connect newegg.ca:443 -servername newegg.ca -tls1_2'
# works with both versions.  This isn't really shown in this script, but it
# helped me get there.

B_RED="\033[1;31m"
B_GREEN="\033[1;32m"
B_YELLOW="\033[1;33m"
NO_COLOUR="\033[0;0m"

URL_COLOUR="${B_YELLOW}"
TLS_COLOUR="${B_RED}"

declare -a urls=(
    "secure.newegg.ca"
    "newegg.ca"
    "gilesorr.com"
    "tpl.ca"
)

OPENOPENSSL="/opt/homebrew/opt/openssl@1.1/bin/openssl"
LIBREOPENSSL="/usr/bin/openssl"

usage () {
    # This function is never called ...
    cat << EOF
Usage: $(basename "${0}")
   Run a series of tests with openssl and libressl to compare issuer output.
   Probably requires a Mac, and a Mac with brew-installed OpenSSL.
EOF
}

tlsversions() {
    # This is an overly debugged version of a similar function used in
    # tlsdetails.
    successful=""
    failed=""
    for tlsversion in ssl3 tls1 tls1_1 tls1_2 tls1_3
    do
        echo -en "${TLS_COLOUR}${tlsversion}${NO_COLOUR}:" > $(tty)
        # let this spew errors on the terminal:
        if echo | ${OPENSSL} s_client -connect "${1}":443 -${tlsversion} > /dev/null
        then
            successful="${tlsversion} ${successful}"
        else
            failed="${tlsversion} ${failed}"
        fi
    done
    echo "${successful} (tried but unavailable: ${failed})"
}

for url in "${urls[@]}"
do
    echo -e "${URL_COLOUR}${url} (Open)${NO_COLOUR}: "
    OPENSSL="${OPENOPENSSL}"
    tlsversions "${url}"
    echo -e "${URL_COLOUR}${url} (Libre)${NO_COLOUR}: "
    OPENSSL="${LIBREOPENSSL}"
    tlsversions "${url}"
done

